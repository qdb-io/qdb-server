/*
 * Copyright 2013 David Tinker
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'groovy'
apply from: file("etc/emma.gradle")

group = 'io.qdb'
version = '0.7.2'
mainClassName = 'io.qdb.server.Main'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile 'io.qdb:qdb-buffer:0.4.1'
    compile 'io.qdb:qdb-kvstore:0.1.3'
    compile 'org.simpleframework:simple:4.1.21'
    compile 'com.google.inject:guice:3.0'
    compile 'ch.qos.logback:logback-core:1.0.7'
    compile 'ch.qos.logback:logback-classic:1.0.7'
    compile 'org.slf4j:slf4j-api:1.6.6'
    compile 'com.typesafe:config:1.0.0'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.1.2'
    compile 'com.google.guava:guava:13.0.1'
    compile 'com.rabbitmq:amqp-client:3.1.0'
    compile 'me.moocar:logback-gelf:0.9.6p2'
    compile 'uk.com.robust-it:cloning:1.9.0'
    compile 'com.github.mfornos:humanize-slim:1.1.2'
    compile 'org.apache.pulsar:pulsar-client:2.6.1'
    compile 'org.apache.pulsar:pulsar-client-admin:2.6.1'

    testCompile "org.codehaus.groovy:groovy-all:1.8.6"
    testCompile "org.spockframework:spock-core:0.6-groovy-1.8"
    testCompile 'junit:junit:4.10'
    testCompile 'commons-io:commons-io:2.4'
}

project.sourceCompatibility = "1.6"
project.targetCompatibility = "1.6"

tasks.run.systemProperties.qdbLogLevel = "DEBUG"

task("run-debug", dependsOn: 'classes', type: JavaExec) {
    main = "io.qdb.server.Main"
    classpath = sourceSets.main.runtimeClasspath
    systemProperties.qdbLogLevel = "DEBUG"
    jvmArgs = ["-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"]
}

tasks.jar {
    def now = new Date().format("yyyy-MM-dd HH:mm")
    manifest {
        attributes('Main-Class': 'io.qdb.server.Main',
                'Implementation-Title': 'QDB Server',
                'Implementation-Version': "${version} ${now}",
                'Implementation-Vendor': 'http://qdb.io/')
    }
    from configurations.runtime.asFileTree.files.findAll { !it.toString().contains("bouncy") }.collect {
        //println("" + it)
        return zipTree(it)
    }
}

task dist(dependsOn: jar, type: Tar) {
    compression = Compression.GZIP
    into("${project.name}-${version}") {
        from(project.file("src/dist"))
        from(jar)
        rename("qdb-server-.*jar", "qdb-server.jar")
    }
}

// create .deb package - needs fpm installed (gem install fpm)
task deb(dependsOn: 'dist') << {
    delete {
        file 'build/debian'
    }
    copy {
        from tarTree("build/distributions/${project.name}-${version}.tgz")
        into 'build/debian/var/lib'
    }
    new File("build/debian/var/lib/${project.name}-${version}").renameTo("build/debian/var/lib/qdb")
    copy {
        from fileTree("src/linux/etc/")
        into 'build/debian/etc'
    }
    copy {
        from file("src/linux/debian")
        into 'build/debian/etc/init.d/'
        include('init.sh')
        rename ('init.sh', 'qdb')
    }
    copy {
        from file("src/linux/debian/default")
        into 'build/debian/etc/default'
        rename ('default', 'qdb')
    }

    def fpm = ("fpm -s dir -t deb -n qdb-server -v ${version} -a noarch " +
            "-d adduser " +
            "--config-files /etc/qdb.properties " +
            "--config-files /etc/default/qdb " +
            "--after-install src/linux/debian/postinst " +
            "--before-remove src/linux/debian/prerm " +
            "--deb-user root --deb-group root " +
            "-f -p build/distributions/qdb-server-${version}.deb " +
            "-C build/debian/")
            .split(" ") as List
    fpm << "-d"  << "default-jre-headless | openjdk-7-jre-headless"
    fpm << "--license" << "Apache 2.0"
    fpm << "--description" << "QDB persistent message queues with replay"
    fpm << "."
    exec {
        commandLine fpm
    }
}

// put s3AccessId and s3SecretKey into gradle.properties for this task
task uploadToS3(dependsOn: ['dist', 'deb']) {
    configurations {
        awstasks
    }
    dependencies {
        awstasks files('lib/awstasks-0.3.jar')
        awstasks 'net.java.dev.jets3t:jets3t:0.6.0'
        awstasks 'org.apache.httpcomponents:httpclient:4.2.5'
        awstasks 'commons-codec:commons-codec:1.3'
    }
    doLast {
        ant.taskdef(name: 'S3Upload', classname: 'dak.ant.taskdefs.S3Upload', classpath: configurations.awstasks.asPath)
        ant.S3Upload(
                verbose:"true",
                accessId: s3AccessId,
                secretKey: s3SecretKey,
                bucket: "downloads.qdb.io",
                publicRead: "true") {
            fileset(dir: "build/distributions/", includes: "**/*")
        }
    }
}
